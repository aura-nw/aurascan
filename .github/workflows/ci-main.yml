name: CI main

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      version:
        description: 'Specify which version to bump (major, minor, patch)'
        required: true
        type: string
        default: 'patch'

jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    # if: github.actor == 'hoangthanh212' || github.actor == 'peara' || github.actor == 'kienvc' 
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get the previous Git tag
        id: get_version
        run: |
          # Get the most recent tag (previous tag of the current commit)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          
          # If there is no previous tag, default to 1.0.0
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, defaulting to version 1.0.0"
            PREVIOUS_TAG="1.0.0"
          fi

          echo "Previous tag: $PREVIOUS_TAG"
          CURRENT_VERSION=$(echo $PREVIOUS_TAG | sed 's/^.*://g')
          echo "version=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Increment version based on input
        id: increment_version
        run: |
          VERSION=${{ env.version }}
          if [ "${{ github.event.inputs.version }}" == "major" ]; then
            VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$1+=1; $2=0; $3=0; print}')
          elif [ "${{ github.event.inputs.version }}" == "minor" ]; then
            VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$2+=1; $3=0; print}')
          elif [ "${{ github.event.inputs.version }}" == "patch" ]; then
            VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$3+=1; print}')
          else
            echo "Invalid version input! Use 'major', 'minor', or 'patch'."
            exit 1
          fi
          echo "New version: $VERSION"
          echo "new_version=$VERSION" >> $GITHUB_ENV
          
      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ env.new_version }}"
          
      - name: Set environment variable
        run: |
          echo ENVIRONMENT=${GITHUB_REF_NAME} >> $GITHUB_ENV
          echo CONTAINER_RELEASE_IMAGE=ghcr.io/aura-nw/explorer-frontend:${{ env.new_version }} >> $GITHUB_ENV
          echo REPO_MANIFEST_NAME=gitops-prod >> $GITHUB_ENV
          echo REPO_MANIFEST_URL=github.com/aura-nw/gitops-prod.git >> $GITHUB_ENV
          echo REPO_MANIFEST_BRANCH=master >> $GITHUB_ENV
          echo REPO_MANIFEST_ENV_MAIN=./clusters/k8s-xstaxy/explorer >> $GITHUB_ENV
          echo REPO_MANIFEST_TAG_IMAGE=image_explorer_frontend >> $GITHUB_ENV
      - name: Build the Docker image and push it to the registry
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod 777 -R ./ci
          ./ci/build.sh
      - name: Update manifest
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          ./ci/updateManifest.sh
